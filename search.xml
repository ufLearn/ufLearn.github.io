<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何使用git]]></title>
    <url>%2F2019%2F03%2F03%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%2F</url>
    <content type="text"><![CDATA[git基础教程git init//初始化版本库(repository) git status//查看状态 git diff//查看修改 git add .//添加内容到版本库 git commit -m ‘提示’//提交并注释 git log//查看历史记录 git resetgit reset hard HEAD^//版本回退 首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 git checkout –file//命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况： 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态。 rm file//删除工作区内容 git rm file//删除版本库内容 添加远程库 git remote add origin git@github.com:michaelliao/learngit.git//请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。 git push -u origin master//把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 git clone git@github.com:michaelliao/gitskills.git//注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了： 分支管理 首先，我们创建dev分支，然后切换到dev分支： $ git checkout -b devgit checkout命令加上-b参数表示创建并切换，相当于以下两条命令： $ git branch dev$ git checkout dev 然后，用git branch命令查看当前分支：$ git branch devmastergit branch命令会列出所有分支，当前分支前面会标一个*号。 dev分支的工作完成，我们就可以切换回master分支： $ git checkout masterSwitched to branch ‘master’ git merge命令用于合并指定分支到当前分支。 git branch -d dev因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。 Git分支十分强大，在团队开发中应该充分应用。 合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 参考资料：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137621280731812dec22ecc9b44f4b2ca1c680f181a5b000 打开git-bash.execd E:\testgitgit add .//有小数点，把内容提交到缓存区git status//检查缓存区是否有未提交内容git commit -m ‘第一次提交’ //‘内容’为注释，提交内容到本地版本库git remote add origin 仓库地址git push origin master//提交内容到远程仓库 git remote -v //查看远程仓库git remote rm gitee1 //删除gitee1仓库git remote add gitee1 git@gitee.com:uflearn/machine_manage.gitgit remote add gitee1 git@github.com:ufLearn/testgit.gitgit push -f gitee master //强制提交内容到远程仓库]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[README.md文件写法解析]]></title>
    <url>%2F2019%2F03%2F01%2Fgithub%E4%B8%ADREADME-md%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[自从开始玩GitHub以来，就越来越感觉它有爱。最近对它的README.md文件颇为感兴趣。便写下这贴，帮助更多的还不会编写README文件的同学们。README文件后缀名为md。md是markdown的缩写，markdown是一种编辑博客的语言。用惯了可视化的博客编辑器（比如CSDN博客，囧），这种编程式的博客编辑方案着实让人眼前一亮。不过GitHub支持的语法在标准markdown语法的基础上做了修改，称为Github Flavored Markdown，简称GFM。 参考资料：https://blog.csdn.net/u012234115/article/details/41778701https://github.com/guodongxiaren/README]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何使用hexo]]></title>
    <url>%2F2019%2F02%2F28%2Fhexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[hexo基础教程 #指令 hexo g = hexo generate // 生成hexo d = hexo deploy // 部署hexo s = hexo server // 运行服务器hexo new post “article title” //新建文章hexo new page “file” //新建文件夹 #头像设置参考：设置侧边栏头像 #文章中插入图片使用markdown写文章，插入图片的格式为,这里要说的是链接地址怎么写。对于hexo，有两种方式： 使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。使用微博图床，地址http://weibotuchuang.sinaapp.com/,将图片拖入区域中，会生成图片的URL，这就是链接地址 #分页设置在配置站点配置文件中添加:12345678910index_generator: per_page: 5archive_generator: per_page: 20 yearly: true monthly: truetag_generator: per_page: 10 分别是主页、归档和标签的页数。如果部署失败就先执行 $ npm i –save ，参考：首页分页和归档分页不同是如何做到的 #新建自定义标签在项目目录执行 hexo new page ${PAGE_NAME} ，在主题配置文件中增加以PAGE_NAME为名的menu，会在${blog_path}\source\文件夹下面生成对应PAGE_NAME名的文件夹，文件中有个index.md文件就是了，只要在写作的md文件头部加上PAGE_NAME就可以了，参考tag，categories…的创建，汉化：在 languages/zh-Hans.yml 文件的menu下面新增PAGE_NAME并汉化。参考：创建分类页面 #生成默认带有categories的模板使用hexo new ${post_title}生成模板时通常只有title,date,tags三个标签，想要加标签的话就在${blog_path}\scaffolds\post.md文件中添加一个标签就可以了。 #菜单栏排序在主题配置文件中找到menu配置块，调整顺序即可。 #侧边栏默认显示与否配置在主题配置文件中，找到sidebar块，配置display。 #网站图标设置在主题配置文件中配置favicon，配置为favicon: /images/favicon.ico，把图标文件favicon.ico放到${blog}\images\文件夹下即可。 #头像设置在主题配置文件中配置avatar为avatar: /images/avatar3.jpg或者一个链接的地址，然后在主题目录下的images文件夹下面放置头像jpg文件。 参考资料：https://www.jianshu.com/p/3c0e175c077fhttps://www.jianshu.com/p/q81RERhttp://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.htmlhttps://www.jianshu.com/p/9f0e90cc32c2]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用博客]]></title>
    <url>%2F2019%2F02%2F27%2F%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[blog基础教程 #初始化hexo hexo init出现的错误不用管，接着输入下面命令，自动安装需要的组件 #开始体验hexo hexo ghexo s #安装配置hexo主题 清空缓存hexo clean 安装主题（git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia） 更新主题：先执行hexo clean，然后重新hexo g，并且hexo d，很快就能看到新主题的效果了~ 安装所需插件npm install hexo-deployer-git –save 然后回到hexo目录，hexo d部署，然后就可以通过http://yourname.github.io访问了。 完成上面部署工作后，看到这里很多朋友还是不知道怎么新建文章。其实很简单，首先在hexo目录下右键进入git，输入hexo n回车，这样会在根目录下的source/_post目录下创建一个md文件，然后右键用markdown编辑器打开（可以使用Sublime Text）。写好了之后，回到hexo根目录使用hexo g，这样会生成博客文件到 public相关目录中，最后输入hexo d回车，等待数秒后就可以发布到github了。 常用操作hexo g更新内容到publichexo s更新内容到localhost:4000hexo d更新内容到github 参考资料https://hexo.io/zh-cn/docs/pluginshttps://zhuanlan.zhihu.com/p/24019875]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
